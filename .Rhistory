setwd("~/Documents/coursera/datasciencecoursera/Getting Data/Project")
download.file(fileURL, "./project.zip", method = "curl")
unzip("./project.zip")
list("UCI HAR Dataset")
getwd()
list.files("./UCI HAR Dataset")
data.table(...)
?multmerge
??multmerge
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
}
file_list <- list.files()
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.table(file, header=TRUE, sep="\t")
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.table(file, header=TRUE, sep="\t")
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
file_list <- list.files("./UCI HAR Dataset")
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.table(file, header=TRUE, sep="\t")
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.table(file, header=TRUE, sep="\t")
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
setwd("~/Documents/coursera/datasciencecoursera/Getting Data/Project/UCI HAR Dataset/test/Inertial Signals")
getwd()
setwd()
setwd(dir)
dir<- getwd()
setwd(dir)
file_list <- list.files(dir)
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.table(file, header=TRUE, sep="\t")
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.table(file, header=TRUE, sep="\t")
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
?exdir
?unzip
train1 <- read.table("./project/UCI HAR Dataset/test/Inertial Signals/body_acc-x-test.txt")
getwd()
train1 <- read.table("/Users/jessicaking/Documents/coursera/datasciencecoursera/Getting Data/Project/UCI HAR Dataset/test/Inertial Signals")
training.x <- read.table("data/UCI HAR Dataset/train/X_train.txt")
training.x <- read.table("data/UCI HAR Dataset/train/x_train.txt")
dir
...
..
setwd
setwd(dir)
read.table("./body_acc_x_test.txt")
setwd(dir)
setwd(dir)
data1 <-read.table("./body_acc_x_test.txt")
head(data1)
tail(data1)
filelist <- list.files(dir)
filelist
datalist = lapply(filelist, function(x)read.table(x, header=FALSE))
head(datalist)
filelist <- list.files("./UCI HAR Dataset/train/Inertial Signals")
filelist
filelist <- list.files(dir)
getwd()
getwd()
getwd()
setwd("~/Documents/coursera/datasciencecoursera/Getting Data/Project/UCI HAR Dataset/train/Inertial Signals")
filelist2 <- list.files(dir)
datalist2 = lapply(filelist2, function(x)read.table(x, header=FALSE))
filelist2
datalist2 <- lappy(filelist2, function(x)read.table(x, header=FALSE))
datalist2 <- lappy(filelist2, function(x)read.table(x, header=FALSE))
datalist2 = lapply(filelist2, function(x)read.table(x, header=FALSE))
setwd("~/Documents/coursera/datasciencecoursera/Getting Data/Project/UCI HAR Dataset/train/Inertial Signals")
dir
dir2 <- "/Users/jessicaking/Documents/coursera/datasciencecoursera/Getting Data/Project/UCI HAR Dataset/test/Inertial Signals"
setwd(dir2)
wd
dir
dir <- "/Users/jessicaking/Documents/coursera/datasciencecoursera/Getting Data/Project/UCI HAR Dataset/train/Inertial Signals"
setwd(dir)
datalist2 = lapply(filelist2, function(x)read.table(x, header=FALSE))
filelist2 <- list.files(dir)
filelist2
datalist2 = lapply(filelist2, function(x)read.table(x, header=FALSE))
summary(datalist2)
sumary(datalist)
summary(datalist)
AllData <- cbind(datalist, datalist2)
summary(AllData)
head(AllData)
AllData
datalist
filelist
test1 <- read.table("body_acc_x_test.txt")
test1 <- read.table("./body_acc_x_test.txt")
test1 <- read.table("./body_acc_x_train.txt")
head(test1)
train1 <- read.table("./body_acc_x_train.txt")
train1 <- read.table("body_acc_x_test.txt")
train2 <- read.table("body_acc_y_test.txt")
train3 <- read.table("body_acc_z_test.txt")
train4 <- read.table("body_gyro_x_test.txt")
train5 <- read.table("body_gyro_y_test.txt")
train6 <- read.table("body_gyro_z_test.txt")
train7 <- read.table("total_acc_x_test.txt")
train8 <- read.table("total_acc_y_test.txt")
train9 <- read.table("total_acc_z_test.txt")
train1 <- read.table("body_acc_x_train.txt")
train2 <- read.table("body_acc_y_train.txt")
train3 <- read.table("body_acc_z_train.txt")
train4 <- read.table("body_gyro_x_train.txt")
train5 <- read.table("body_gyro_y_train.txt")
train6 <- read.table("body_gyro_z_train.txt")
train7 <- read.table("total_acc_x_train.txt")
train8 <- read.table("total_acc_y_train.txt")
train9 <- read.table("total_acc_z_train.txt")
setwd("~/Documents/coursera/datasciencecoursera/Getting Data/Project/UCI HAR Dataset/test/Inertial Signals")
test1 <- read.table("body_acc_x_test.txt")
test2 <- read.table("body_acc_y_test.txt")
test3 <- read.table("body_acc_z_test.txt")
test4 <- read.table("body_gyro_x_test.txt")
test5 <- read.table("body_gyro_y_test.txt")
test6 <- read.table("body_gyro_z_test.txt")
test7 <- read.table("total_acc_x_test.txt")
test8 <- read.table("total_acc_y_test.txt")
test9 <- read.table("total_acc_z_test.txt")
merge1 <- cbind(test1, train1)
merge1 <- rbind(test1, train1)
merge2 <- rbind(test2, train2)
merge3 <- rbind(test3, train3)
merge4 <- rbind(test4, train4)
merge5 <- rbind(test5, train5)
merge6 <- rbind(test6, train6)
merge7 <- rbind(test7, train7)
merge8 <- rbind(test8, train8)
merge9 <- rbind(test9, train9)
fullset <- rbind(merge1, merge2, merge3, merge4, merge5, merge6, merge7, merge8, merge9)
?grepl
setwd("~/Documents/coursera/datasciencecoursera/Getting Data/Project/UCI HAR Dataset")
features <- read.table("./features.txt")mean.col <- sapply(features[,2], function(x) grepl("mean()", x, fixed=T))
std.col <- sapply(features[,2], function(x) grepl("std()", x, fixed=T))
# Extract them from the data
edf <- df[, (mean.col | std.col)]
colnames(edf) <- features[(mean.col | std.col), 2]
edf
features <- read.table("./features.txt")
mean.col <- sapply(features[,2], function(x) grepl("mean()", x, fixed=T))
std.col <- sapply(features[,2], function(x) grepl("std()", x, fixed=T))
edf <- df[, (mean.col | std.col)]
colnames(edf) <- features[(mean.col | std.col), 2]
edf
setwd("~/Documents/coursera/datasciencecoursera/Getting Data/Project")
filelist1 <- list.files("./UCI HAR Dataset/test")
filelist1
activitytest <- read.table("./UCI HAR Dataset/test/y_test.txt")
activitytrain <- read.table("./UCI HAR Dataset/test/y_train.txt")
activitytrain <- read.table("./UCI HAR Dataset/train/y_train.txt")
subjecttest <- read.table("./UCI HAR Dataset/test/subject_test.txt")
subjecttrain <- read.table("./UCI HAR Dataset/train/subject_train.txt")
featurestest <- read.table("./UCI HAR Dataset/test/x_test.txt")
featurestrain <- read.table("./UCI HAR Dataset/train/x_train.txt")
dataactivity <-rbind(activitytest, activitytrain)
datasubject <- rbind(subjecttest, subjecttrain)
datafeatures <-rbind(featurestest, featurestrain)
head(dataactivity)
?names
names(datasubject)<-c("subject")
maes(dataactivity)<-c("activity")
names(dataactiviy)<-c("activity")
names(dataactivity)<-c("activity")
datafeaturesnames <- read.table("./UCI HAR Dataset/features.txt")
names(datafeatures)<- datafeaturesnames$V2
datacombin <- cbind(datasubject, dataactivity)
data <- cbind(datafeatures, datacombin)
head(data)
View(dataset)
names(datafeatures)<- datafeaturesnames$V2
?grep
View(datafeaturesnames)
View(datafeaturesnames)
filter(data, grepl('mean|std'))
View(data)
reduced <- select(data, grep(mean|std))
?grep
reduced <- select(data, grep("mean"|"std"))
reduced <- select(data, grep("mean"|"std", head))
subdataFeaturesNames<-datafeaturesnames$V2[grep("mean\\(\\)|std\\(\\)", datafeaturesnames$V2)]
selectednames <-c(as.character(subdataFeaturesNames), "subject", "activity")
data<-subset(data, select=selectednames)
activitylabels <- read.table("./UCI HAR Dataset/activity_labels.txt")
head(activitylabels)
head(data$activity, 30)
data$activity <- factor(data$activity,
levels = C(1, 2, 3, 4, 5, 6),
labels = c("Walking", "Walking Upstairs", "Walking Downstairs", "sitting", "Standing", "Laying")
)
data$activity <- factor(data$activity,
levels = C("1", "2", "3", "4", "5", "6"),
labels = c("Walking", "Walking Upstairs", "Walking Downstairs", "sitting", "Standing", "Laying")
)
data$activity <- fordered(data$activity,
levels = c("1", "2", "3", "4", "5", "6"),
labels = c("Walking", "Walking Upstairs", "Walking Downstairs", "sitting", "Standing", "Laying")
)
data$activity <- ordered(data$activity,
levels = c("1", "2", "3", "4", "5", "6"),
labels = c("Walking", "Walking Upstairs", "Walking Downstairs", "sitting", "Standing", "Laying")
)
library(swirl)
swirl()
1:20
pi:20
pi:10
0
(0)
0
exit
data$activity <- factor(data$activity,
levels = C(1, 2, 3, 4, 5, 6),
labels = c("Walking", "Walking Upstairs", "Walking Downstairs", "sitting", "Standing", "Laying")
)
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
0
head(data)
exit(swirl)
0
0
cran <- tbl_df((mydf))
info()
bye()
head(data)
subdataFeaturesNames<-datafeaturesnames$V2[grep("mean\\(\\)|std\\(\\)", datafeaturesnames$V2)]
selectednames <-c(as.character(subdataFeaturesNames), "subject", "activity")
data<-subset(data, select=selectednames)
head(data)
head(data$activiy)
data$activity
head(data)
names(data)<-gsub("^t", "time", names(data))
names(data)<-gsub("^f", "frequency", names(data))
names(data)<-gsub("Acc", "Accelerometer", names(data))
names(data)<-gsub("Gyro", "Gyroscope", names(data))
names(data)<-gsub("Mag", "Magnitude", names(data))
names(data)<-gsub("BodyBody", "Body", names(data))
names(data)
names(data)<-gsub("^t", "Time", names(data))
names(data)<-gsub("^f", "Frequency", names(data))
names(data)<-gsub("Acc", "Accelerometer", names(data))
names(data)<-gsub("Gyro", "Gyroscope", names(data))
names(data)<-gsub("Mag", "Magnitude", names(data))
names(data)<-gsub("BodyBody", "Body", names(data))
names(data)
data2 <- aggregate(. ~subject + activity, data, mean)
head(data2)
data2$subject
data2$activity
head(data2)
names(data2)
write.table(data2)
data2<-data2[order(data2$subject,data2$activity),]
write.table(data2, file = "tidydata.txt",row.name=FALSE)
write.table(data2, file = "tidydata.txt",row.name=FALSE)
data4 <- read.table("./tidydata.txt", header = TRUE)
View(data4)
data4 <- read.table("./tidydata.txt", header = TRUE)
> View(data4)
library(swirl)
swirl()
swirl()
install.packages(swirl)
install.packages("swirl")
setwd("~/Documents/coursera/RepoResearch")
fileURL<-"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
setwd("~/Documents/coursera/RepoResearch")
download.file(fileURL, "./project1.zip", method = "curl")
unzip("./project1.zip")
activity<- read.csv("./activity.csv")
head(activity)
str(activity)
?mean
steps<- as.numeric(activity$steps)
hist(steps, col="green", main= "Average Daily Steps" xlab="Date", ylab="steps")
hist(steps, col="green", main= "Average Daily Steps", xlab="Date", ylab="steps")
stepsByDay <- tapply(activity$steps, activity$date, sum, na.rm=TRUE)
mean(stepsByDay)
stepsByDay
hist(stepsByDay, col = "blue", xlab = "Date", ylab = "Total Steps")
hist(stepsByDay, col= "red")
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=500)
library(dplyr)
library(ggplot2)
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=500)
stepsPerDay <- tapply(activity$steps, activity$date, sum, na.rm=TRUE)
?POSIXlt
dates <-strptime(as.character(activity$date), "%y/%m/%d")
dates
activity
dates <-strptime(as.character(activity$date), "%Y/%m/%d")
dates
?date
?strptime
dates <-strptime(activity$date, "%Y/%m/%d")
head(dates)
dates <-strptime(activity$date, "%Y-%m-%d")
head(dates)
DayOfWeek<-strptime(activity$date, "%A")
head(DayOfWeek)
DayOfWeek <- format(activity$date, "%A")
DayOfWeek <- format(dates, "%A")
DayOfWeek
DayOfWeek <- format(dates, "%A")
stepsPerDay
hist(stepsPerDay)
hist(stepsByDay, col = "blue", xlab = "Steps Per Day", ylab = "Frequency")
hist(stepsByDay, col = "blue", xlab = "Steps Per Day", ylab = "Frequency", main = "Distrobution of Steps Per Day")
hist(stepsByDay, xlab = "Steps Per Day", ylab = "Frequency", main = "Distribution of Steps Per Day")
mean(stepsPerDay)
median(stepsPerDay)
plot(names(stepsPerDay), stepsPerDay, type="l",
xlab="Day", ylab=expression("Steps"),
main=expression("Steps Per Day"))
stepsPerInt <- tapply(activity$steps, activity$interval, mean, na.rm=TRUE)
stepsPerInt
png("plot1.png")
plot(names(stepsPerInt), stepsPerInt, type="l",
xlab="Time Interval", ylab=expression("Steps"),
main=expression("Daily Steps per 5 Minute Interval"))
dev.off()
plot(names(stepsPerInt), stepsPerInt, type="l",
+      xlab="Time Interval", ylab=expression("Steps"),
+      main=expression("Daily Steps per 5 Minute Interval"))
plot(names(stepsPerInt), stepsPerInt, type="l", xlab="Time Interval", ylab=expression("Steps"),main=expression("Daily Steps per 5 Minute Interval"))
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activity$steps), by=list(interval=activity$interval), FUN=mean, na.rm=TRUE)
averageStepsPerTimeBlock
ggplot(data=averageStepsPerTimeBlock, aes(x=interval, y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
which.max(stepsPerInt)
mostSteps <- which.max(averageStepsPerTimeBlock$meanSteps)
mostSteps
MaxSteps<-which.max(stepsPerInt)
MaxSteps
sum(is.na(activity))
?impute
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
library("Hmisc")
install.packages("Hmisc")
library(Hmisc)
?impute
ActivityImpute<- activity
ActivityImpute <- impute(ActivityImpute$steps, fun = Mean)
ActivityImpute <- impute(ActivityImpute$steps, fun = mean)
ActivityImpute
hist(ActivityImpute)
stepsPerDayImpute <- tapply(ActivityImpute$steps, ActivityImpute$date, sum, na.rm=TRUE)
stepsPeryDayImputed <- tapply(activityDataImputed$steps, activityDataImputed$date, sum)
stepsPeryDayImputed <- tapply(activityImputed$steps, activityImputed$date, sum)
stepsPeryDayImputed <- tapply(ActivityImputed$steps, ActivityImputed$date, sum)
stepsPeryDayImputed <- tapply(ActivityImpute$steps, ActivityImpute$date, sum)
ActivityImpute<- activity
DF <- data.frame(ActivityImpute)
DF$imputed_steps <- with(DF, impute(steps), mean))
DF <- data.frame(ActivityImpute)
DF$imputed_steps <- with(DF, impute(steps), mean)
DF
sum(is.na(DF))
DF <- data.frame(ActivityImpute)
DF$imputed_steps <- with(DF, impute(steps), mean)
DF$imputed_steps
DF <- data.table(ActivityImpute)
DF$imputed_steps <- with(DF, impute(steps), mean)
head(DF)
library(dplyr)
select(date, interval, imputed steps)
select(date, interval, imputed_steps)
select(ActivityImpute, date, interval, imputed_steps)
head(ActivityImpute)
ActivityImpute <- DF
head(ActivityImpute)
ActivityImpute <- data.frame(ActivityImpute)
ActivityImpute$imputed_steps <- with(ActivityImpute, impute(steps), mean)
head(ActivityImpute)
sum(is.na(ActivityImpute))
sum(is.na(ActivityImpute$imputed_steps))
select(ActivityImpute, date, interval, imputed_steps)
ActivityImpute <-select(ActivityImpute, date, interval, imputed_steps)
sum(is.na(ActivityImpute))
ImputedStepsPerDay <- tapply(ActivityImpute$imputed_steps, ActivityImpute$date, sum, na.rm=TRUE)
ImputedStepsPerDay
hist(ImputedStepsPerDay, xlab = "Steps Per Day", ylab = "Frequency", main = "Distribution of Steps Per Day (Imputed)")
hist(ImputedStepsPerDay, xlab = "Steps Per Day", ylab = "Frequency", main = "Distribution of Steps Per Day (Imputed)")
ImputedMean<- mean(ImputedStepsPerDay)
ImputedMean
ImputedMedian <- median(ImputedStepsPerDay)
ImputedMedian
ActivityImpute$day = strftime(ActivityImpute$date,'%A')
head(ActivityImpute)
ActivityImpute$day = strftime(ActivityImpute$date,'%A')
?weekdays
ActivityImpute$weekday = weekdays(ActivityImpute$date)
ActivityImpute$weekend <- factor(ActivityImpute$day, levels = C(Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday), labels = c("Weekday","Weekday","Weekday","Weekday","Weekday", "Weekend", "Weekend"))
ActivityImpute$weekend <- factor(ActivityImpute$day, levels = C("Monday", "Tuesday", "Wednesday", Thursday, Friday, Saturday, Sunday), labels = c("Weekday","Weekday","Weekday","Weekday","Weekday", "Weekend", "Weekend"))
names(ActivityImpute)<-gsub("Monday", "Weekday"
)
weekdays <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
ActivityImpute$wDay <- factor((weekdays(ActivityImpute$date) %in% weekdays),
levels=c(FALSE, TRUE), labels=c('weekend', 'weekday')
)
WeekdayData<- filter(ActivityImpute, day=Monday)
WeekdayData<- filter(ActivityImpute, day == Monday)
WeekdayData<- filter(ActivityImpute, day == "Monday")
WeekdayData<- filter(ActivityImpute, day == "Monday" | day == "Tuesday" |day == "Wednesday" |day == "Thursday" |day == "Friday" )
head(WeekdayData)
tail(WeekdayData)
tail(ActivityImpute)
str(ActivityImpute)
dim(ActivityImpute)
summary(ActivityImpute)
WeekdayData<- filter(ActivityImpute, day == "Monday" | day == "Tuesday" |day == "Wednesday" |day == "Thursday" |day == "Friday" )
WeekendData<- filter(ActivityImpute, day == "Sunday" | day == "Saturday")
head(WeekdayData)
stepsPerIntWDay <- tapply(WeekdayData$imputed_steps, WeekdayData$interval, mean, na.rm=TRUE)
stepsPerIntWDay
stepsPerIntWEnd <- tapply(WeekendData$imputed_steps, WeekendData$interval, mean, na.rm=TRUE)
stepsPerIntWEnd
MaxSteps<-which.max(ActivityImpute)
MaxSteps<-which.max(ActivityImpute$imputed_steps)
MaxSteps
ActivityImputed$dateType <-  ifelse(as.POSIXlt(ActivityImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
?strftime
ActivityImputed$dateType <-  ifelse((ActivityImputed$day) %in% c('Sunday','Saturday'), 'weekend', 'weekday')
ActivityImpute$dateType <-  ifelse((ActivityImpute$day) %in% c('Sunday','Saturday'), 'weekend', 'weekday')
head(ActivityImpute)
ActivityImpute$dayType <-  ifelse((ActivityImpute$day) %in% c('Sunday','Saturday'), 'weekend', 'weekday')
head(ActivityImpute)
stepsPerIntImpute <- tapply(ActivityImpute$imputed_steps, ActivityImpute$interval, mean, na.rm=TRUE)
stepsPerIntImpute
averagedActivityImpute <- aggregate(imputed_steps ~ interval + dayType, data=ActivityImputed, mean)
ggplot(averagedActivityImpute, aes(interval, imputed_steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
averagedActivityImpute <- aggregate(imputed_steps ~ interval + dayType, data=ActivityImpute, mean)
ggplot(averagedActivityImpute, aes(interval, imputed_steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
plot(names(stepsPerIntWDay), stepsPerIntWDay, type="l", xlab="Time Interval", ylab=expression("Steps"),main=expression("Daily Steps per 5 Minute Interval- WeekDay"))
plot(names(stepsPerIntWEnd), stepsPerIntWEnd, type="l", xlab="Time Interval", ylab=expression("Steps"),main=expression("Daily Steps per 5 Minute Interval- WeekEnd"))
stepsPerIntWEnd <- tapply(WeekendData$imputed_steps, WeekendData$interval, mean, na.rm=TRUE)
par(mfrow=c(2,1))
plot(names(stepsPerIntWDay), stepsPerIntWDay, type="l", xlab="Time Interval", ylab=expression("Steps"),main=expression("Daily Steps per 5 Minute Interval- WeekDay"))
plot(names(stepsPerIntWEnd), stepsPerIntWEnd, type="l", xlab="Time Interval", ylab=expression("Steps"),main=expression("Daily Steps per 5 Minute Interval- WeekEnd"))
png("plot2.png")
par(mfrow=c(2,1))
plot(names(stepsPerIntWDay), stepsPerIntWDay, type="l", xlab="Time Interval", ylab=expression("Steps"),main=expression("Weekday"))
plot(names(stepsPerIntWEnd), stepsPerIntWEnd, type="l", xlab="Time Interval", ylab=expression("Steps"),main=expression("Weekend"))
dev.off()
---
---
)
MeanSteps<- mean(stepsPerDay)
MedianSteps<- median(stepsPerDay)
DifferenceMean <- ImputedMean - MeanSteps
DifferenceMean
DifferenceMedian <- ImputedMedian- MedianSteps
DifferenceMedian
par(mfrow=c(2,1))
hist(stepsByDay, xlab = "Steps Per Day", ylab = "Frequency", main = "Distribution of Steps Per Day")
hist(ImputedStepsPerDay, xlab = "Steps Per Day", ylab = "Frequency", main = "Distribution of Steps Per Day (Imputed)")
png("plot3.png")
par(mfrow=c(2,1))
hist(stepsByDay, xlab = "Steps Per Day", ylab = "Frequency", main = "Distribution of Steps Per Day")
hist(ImputedStepsPerDay, xlab = "Steps Per Day", ylab = "Frequency", main = "Distribution of Steps Per Day (Imputed)")
dev.off()
```
setwd("~/Documents/coursera/RepoResearch/RepoResearch")
source('~/.active-rstudio-document', echo=TRUE)
